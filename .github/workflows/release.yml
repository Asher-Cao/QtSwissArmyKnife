name: release
on:
  push:
    tags:
      - v*
env:
  OUTPUT_FILE: QtSwissArmyKnife
  RELEASE_NAME: qtswissarmyknife
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

jobs:
  create-release:
    name: Create release
    runs-on: ubuntu-20.04
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Create Release
        uses: actions/create-release@v1
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body: 'The version is ready. You can see the changed log: https://github.com/qsaker/QtSwissArmyKnife/blob/master/resources/files/History.txt'
          draft: false
          prerelease: false
  build-for-windows:
    needs: [create-release]
    name: Build for Windows
    runs-on: windows-2019
    strategy:
      matrix:
        version: [6.5.3]
        target: [desktop]
        arch: [win64_msvc2019_64]
    steps:
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{ matrix.version }}
          target: ${{ matrix.target }}
          arch: ${{ matrix.arch }}
          host: 'windows'
          modules: 'qtcharts qtserialbus qtserialport qtwebsockets'
      - name: Pull code
        uses: actions/checkout@v3
      - name: build-msvc
        shell: cmd
        env:
          vc_arch: ${{ matrix.arch }}
        run: |
          mkdir build
          cd build
          call "C:\Program Files (x86)\Microsoft Visual Studio\2019\Enterprise\VC\Auxiliary\Build\vcvarsall.bat" x64
          cmake -DCMAKE_PREFIX_PATH='${{ github.workspace }}/Qt/${{ matrix.version }}/${{ matrix.arch }}/lib/cmake/Qt6' -DCMAKE_BUILD_TYPE=Release -G "NMake Makefiles" ../
          nmake
      - name: Gets latest created release info
        id: latest_release_info
        uses: jossef/action-latest-release-info@v1
      - name: Rename directory
        env:
          zip_derectory: ${{ env.RELEASE_NAME }}-${{ steps.latest_release_info.outputs.tag_name }}-for-windows-${{ matrix.arch }}
        run: |
          mkdir ${{ env.zip_derectory }}
          xcopy /e release ${{ env.zip_derectory }}
      - name: To zip
        env:
          zip_derectory: ${{ env.RELEASE_NAME }}-${{ steps.latest_release_info.outputs.tag_name }}-for-windows-${{ matrix.arch }}
        run: |
          7z.exe a ${{ env.zip_derectory }}.zip ${{ env.zip_derectory }}/*
          dir
      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          zip_derectory: ${{ env.RELEASE_NAME }}-${{ steps.latest_release_info.outputs.tag_name }}-for-windows-${{ matrix.arch }}
        with:
          upload_url: ${{ steps.latest_release_info.outputs.upload_url }}
          asset_path: ${{ env.zip_derectory }}.zip
          asset_name: ${{ env.zip_derectory }}.zip
          asset_content_type: application/zip